scale_fill_gradient(low = "white", high = "darkred") +
facet_wrap(~day)
ggmap(h_map) +
stat_density2d(data = violent_crimes,
aes(x = lon, y = lat,
fill = ..level..,
alpha = ..level..),
geom = "polygon") +
scale_fill_gradient(low = "white", high = "darkred") +
facet_wrap(~day)
ggmap(h_map) +
stat_density2d(data = violent_crimes,
aes(x = lon, y = lat,
fill = ..level..,
alpha = ..level..),
geom = "polygon") +
scale_fill_gradient(low = "white", high = "darkred") +
facet_wrap(~day, nrow = 2) +
theme(legend.position = 'none')
shiny::runApp('Fall 2017/DSO 545/Homeless Project/Testing/Test')
install.packages("shinydashboard")
runApp('Fall 2017/DSO 545/Homeless Project/Testing/Test')
runApp('Fall 2017/DSO 545/Homeless Project/Testing/Test')
runApp('Fall 2017/DSO 545/Homeless Project/Testing/Test')
runApp('Fall 2017/DSO 545/Homeless Project/Testing/Test')
runApp('Fall 2017/DSO 545/Homeless Project/Testing/Test')
icecream = read.csv('icecream.csv')
library(scales)
library(ggplot2)
library(dplyr)
library(tidyr)
library(rvest)
library(knitr)
library(stringr)
avgIceCreamSpending = icecream %>%
group_by(Country.or.Area) %>%
summarise(AvgSpending = mean(USDinMillions))
kable(head(avgIceCreamSpending))
View(avgIceCreamSpending)
world_data = map_data("world")
icecream_map = full_join(world_data,
avgIceCreamSpending,
by = c("region" = "Country.or.Area"))
ggplot(icecream_map,
aes(x = long,
y = lat,
group = group,
fill = AvgSpending)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
ggtitle("Average Spending on Icecream for 1995 - 2012.\n  (No data available for white area)") +
labs(fill = 'Million USD') +
theme_void()
ggplot(icecream_map,
aes(x = long,
y = lat,
group = group,
fill = AvgSpending)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
ggtitle("Average Spending on Icecream for 1995 - 2012.\n\t (No data available for white area)") +
labs(fill = 'Million USD') +
theme_void()
ggplot(icecream_map,
aes(x = long,
y = lat,
group = group,
fill = AvgSpending)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
ggtitle("Average Spending on Icecream for 1995 - 2012.\n\t\t (No data available for white area)") +
labs(fill = 'Million USD') +
theme_void()
ggplot(icecream_map,
aes(x = long,
y = lat,
group = group,
fill = AvgSpending)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
ggtitle("Average Spending on Icecream for 1995 - 2012.\n\t  (No data available for white area)") +
labs(fill = 'Million USD') +
theme_void()
ggplot(icecream_map,
aes(x = long,
y = lat,
group = group,
fill = AvgSpending)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
ggtitle("Average Spending on Icecream for 1995 - 2012.\n\t     (No data available for white area)") +
labs(fill = 'Million USD') +
theme_void()
ggplot(icecream_map,
aes(x = long,
y = lat,
group = group,
fill = AvgSpending)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
ggtitle("Average Spending on Icecream for 1995 \- 2012.\n\t     (No data available for white area)") +
ggplot(icecream_map,
aes(x = long,
y = lat,
group = group,
fill = AvgSpending)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
ggtitle("Average Spending on Icecream for 1995 \\- 2012.\n\t     (No data available for white area)") +
labs(fill = 'Million USD') +
theme_void()
ggplot(icecream_map,
aes(x = long,
y = lat,
group = group,
fill = AvgSpending)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
ggtitle("Average Spending on Icecream for 1995 - 2012.\n\t     (No data available for white area)") +
labs(fill = 'Million USD') +
theme_void()
paste("Average Spending.\n",
"(No Data)")
fprint(paste("Average Spending.\n",
"(No Data)"))
ggplot(icecream_map,
aes(x = long,
y = lat,
group = group,
fill = AvgSpending)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
ggtitle(paste("Average Spending on Icecream for 1995 - 2012.\n",
"\t     (No data available for white area)")) +
labs(fill = 'Million USD') +
theme_void()
icecream = read.csv('icecream.csv')
library(scales)
library(ggplot2)
library(dplyr)
library(tidyr)
library(rvest)
library(knitr)
library(ggmap)
library(ggmap)
library(stringr)
avgIceCreamSpending = icecream %>%
group_by(Country.or.Area) %>%
summarise(AvgSpending = mean(USDinMillions))
kable(head(avgIceCreamSpending))
world_data = map_data("world")
ggplot(icecream_map,
aes(x = long,
y = lat,
group = group,
fill = AvgSpending)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
ggtitle(paste("Average Spending on Icecream for 1995 - 2012.\n",
"\t     (No data available for white area)")) +
labs(fill = 'Million USD') +
theme_void()
icecream_map = full_join(world_data,
avgIceCreamSpending,
by = c("region" = "Country.or.Area"))
ggplot(icecream_map,
aes(x = long,
y = lat,
group = group,
fill = AvgSpending)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = "white", high = "red", na.value = "white") +
ggtitle(paste("Average Spending on Icecream for 1995 - 2012.\n",
"\t     (No data available for white area)")) +
labs(fill = 'Million USD') +
theme_void()
View(icecream_map)
icecream_map[is.na(icecream_map)] = 0
ggplot(icecream_map,
aes(x = long,
y = lat,
group = group,
fill = AvgSpending)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = "white", high = "red") +
ggtitle(paste("Average Spending on Icecream for 1995 - 2012.\n",
"\t     (No data available for white area)")) +
labs(fill = 'Million USD') +
theme_void()
shiny::runApp('Fall 2017/DSO 545/Homeless Project/LAHomelessCT')
runApp('C:/Users/Fang/Desktop/Python Trading/Shiny Apps/SPX Options')
library(dplyr)
library(shiny)
library(shinydashboard)
runApp('C:/Users/Fang/Desktop/Python Trading/Shiny Apps/SPX Options')
install.packages('shinythemes')
runApp('C:/Users/Fang/Desktop/Python Trading/Shiny Apps/SPX Options')
install.packages('quantmod')
library(quantmod)
l_ply(symbols, function(sym) try(getSymbols(sym)))
library(plyr)
l_ply(symbols, function(sym) try(getSymbols(sym)))
symbols <- symbols[symbols %in% ls()]
library(BatchGetSymbols, quietly = T)
install.packages('BatchGetSymbols')
first.date <- Sys.Date()-150
last.date <- Sys.Date()
tickers <- c('FB','NYSE:MMM','PETR4.SA','^GSPC
')
l.out <- BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date)
library(BatchGetSymbols, quietly = T)
l.out <- BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date)
p <- ggplot(l.out$df.tickers, aes(x = ref.date, y = price.close))
p <- p + geom_line()
p <- p + facet_wrap(~ticker, scales = 'free_y')
print(p)
tickers <- c('FB','NYSE:MMM','PETR4.SA','^GSPC')
l.out <- BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date)
p <- ggplot(l.out$df.tickers, aes(x = ref.date, y = price.close))
p <- p + geom_line()
p <- p + facet_wrap(~ticker, scales = 'free_y')
print(p)
tickers <- c('^VIX','^SKEW','^GSPC')
l.out <- BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date)
first.date <- Sys.Date()-3000
last.date <- Sys.Date()
tickers <- c('^VIX','^SKEW','^GSPC')
l.out <- BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date)
p <- ggplot(l.out$df.tickers, aes(x = ref.date, y = price.close))
p <- p + geom_line()
p <- p + facet_wrap(~ticker, scales = 'free_y')
print(p)
first.date <- Sys.Date()-8000
last.date <- Sys.Date()
tickers <- c('^VIX','^GSPC')
l.out <- BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date)
p <- ggplot(l.out$df.tickers, aes(x = ref.date, y = price.close))
p <- p + geom_line()
p <- p + facet_wrap(~ticker, scales = 'free_y')
print(p)
stocks = l.out$df.tickers
View(stocks)
View(stocks)
l.out = BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date)$df.tickers
first.date = Sys.Date() - 8000
last.date = Sys.Date()
tickers = c('^VIX','^GSPC')
l.out = BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date)$df.tickers
stock_df = BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date)$df.tickers
first.date = Sys.Date() - 8000
last.date = Sys.Date()
tickers = c('^VIX','^GSPC')
stock_df = BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date)$df.tickers
ggplot(stock_df, aes(x = ref.date, y = price.close)) +
geom_line() +
facet_wrap(~ticker, scales = 'free_y')
head(stock_df[6:8
])
stock_df = BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date)$df.tickers[6:8]
ggplot(stock_df, aes(x = ref.date, y = price.close)) +
geom_line() +
facet_wrap(~ticker, scales = 'free_y')
ggplot(stock_df, aes(x = ref.date, y = price.adjusted)) +
geom_line() +
facet_wrap(~ticker, scales = 'free_y')
colnames(stock_df) = c('AdjPrice','Date','Ticker')
ggplot(stock_df, aes(x = ref.date, y = price.adjusted)) +
geom_line() +
facet_wrap(~ticker, scales = 'free_y')
ggplot(stock_df, aes(x = ref.date, y = AdjPrice)) +
geom_line() +
facet_wrap(~ticker, scales = 'free_y')
ggplot(stock_df, aes(x = Date, y = AdjPrice)) +
geom_line() +
facet_wrap(~ticker, scales = 'free_y')
stock_df = BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date)$df.tickers[6:8]
colnames(stock_df) = c('AdjPrice','Date','Ticker')
ggplot(stock_df, aes(x = Date, y = AdjPrice)) +
geom_line() +
facet_wrap(~ticker, scales = 'free_y')
ggplot(stock_df, aes(x = Date, y = AdjPrice)) +
geom_line() +
facet_wrap(~Ticker, scales = 'free_y')
runApp('C:/Users/Fang/Desktop/Python Trading/Shiny Apps/SPX Options')
LookBackDays = 8000
startDate = Sys.Date() - LookBackDays
lastDate = Sys.Date()
tickers = c('^VIX','^GSPC')
stock_df = BatchGetSymbols(tickers = tickers,
first.date = startDate,
last.date = lastDate)$df.tickers[6:8]
colnames(stock_df) = c('AdjPrice','Date','Ticker')
ggplot(stock_df, aes(x = Date, y = AdjPrice)) +
geom_line() +
facet_wrap(~Ticker, scales = 'free_y')
runApp('C:/Users/Fang/Desktop/Python Trading/Shiny Apps/SPX Options')
library(stringr)
(tidyr)
library(tidyr)
page1 = "https://coinmarketcap.com/all/views/all/"
tbl1 = page1 %>%
read_html() %>%
html_nodes(xpath = '/html/body/div[4]/div/div[1]/div[2]/div[3]') %>%
html_table()
tbl1 = page1 %>%
read_html() %>%
html_nodes(xpath = '/html/body/div[4]/div/div[1]/div[2]') %>%
html_table()
rnorm(10)
rnorm(10,5,1)
install.packages('forecast')
library(lubridate)
library(dplyr)
library(nnet)
dataset = read.csv('earnings_data.csv')
dataset$quarter = as.Date(dataset$quarter, "%m/%d/%Y")
train = dataset %>%
filter(quarter < as.Date('2018-03-31'))
train = train[3:ncol(dataset)]
test = dataset %>%
filter(quarter >= as.Date('2018-03-31')) %>%
filter(quarter < as.Date('2018-05-31'))
test = test[3:ncol(dataset)]
valid = dataset %>%
filter(quarter >= as.Date('2018-05-31'))
valid = valid[3:ncol(dataset)]
train
library(lubridate)
library(dplyr)
library(nnet)
dataset = read.csv('earnings_data.csv')
dataset$quarter = as.Date(dataset$quarter, "%m/%d/%Y")
setwd("C:/Users/Fang/Desktop/Python Trading/SPX Option Backtester/SPX Put Selling/Live Data Pulling/Earnings Pulling")
dataset = read.csv('earnings_data.csv')
dataset$quarter = as.Date(dataset$quarter, "%m/%d/%Y")
train = dataset %>%
filter(quarter < as.Date('2018-03-31'))
train = train[3:ncol(dataset)]
test = dataset %>%
filter(quarter >= as.Date('2018-03-31')) %>%
filter(quarter < as.Date('2018-05-31'))
test = test[3:ncol(dataset)]
valid = dataset %>%
filter(quarter >= as.Date('2018-05-31'))
valid = valid[3:ncol(dataset)]
train
cols(train)
train.cols
col(train)
colnames(train)
colnames(train)[1:ncol(train) - 1]
model.grid = function(n){
n.list = rep(list(0:1), n)
expand.grid(n.list)
}
best.subset <- function(y, x.vars, data){
# y       character string and name of dependent variable
# xvars   character vector with names of predictors
# data    training data with y and xvar observations
require(dplyr)
require(purrr)
require(magrittr)
length(x.vars) %>%
model.grid %>%
apply(1, function(x) which(x > 0, arr.ind = TRUE)) %>%
map(function(x) x.vars[x]) %>%
.[2:dim(model.grid(length(x.vars)))[1]] %>%
map(function(x) multinom(paste0(y, " ~ ", paste(x, collapse = "+")), data = data)) %>%
map(function(x) CV(x)) %>%
do.call(rbind, .) %>%
cbind(model.grid(length(x.vars))[-1, ], .) %>%
arrange(., AICc)
}
best.subset(y, x.vars, train)
y = 'return_factor'
x.vars = colnames(train)[1:ncol(train) - 1]
best.subset(y, x.vars, train)
x.vars
y = 'return_factor'
x.vars = c('1Year','1month','3month','6month',
'current_ratio',
'total_debt_equity_ratio',
'day_sales_outstanding',
'total_liabilities_total_assets',
'gross_margin',
'operating_margin',
'interest_coverage_ratio',
'net_profit_margin',
'roe',
'changeInCash',
'changeToLiabilities',
'changeToNetincome',
'changeToOperatingActivities')
out = best.subset(y, x.vars, train)
x.vars = c('X1Year','X1month','X3month','X6month',
'current_ratio',
'total_debt_equity_ratio',
'day_sales_outstanding',
'total_liabilities_total_assets',
'gross_margin',
'operating_margin',
'interest_coverage_ratio',
'net_profit_margin',
'roe',
'changeInCash',
'changeToLiabilities',
'changeToNetincome',
'changeToOperatingActivities')
out = best.subset(y, x.vars, train)
library(lubridate)
library(dplyr)
library(nnet)
dataset = read.csv('earnings_data.csv')
dataset$quarter = as.Date(dataset$quarter, "%m/%d/%Y")
train = dataset %>%
filter(quarter < as.Date('2018-03-31'))
train = train[3:ncol(dataset)]
test = dataset %>%
filter(quarter >= as.Date('2018-03-31')) %>%
filter(quarter < as.Date('2018-05-31'))
test = test[3:ncol(dataset)]
valid = dataset %>%
filter(quarter >= as.Date('2018-05-31'))
valid = valid[3:ncol(dataset)]
classifier = multinom(return_factor ~ ., data = train)
??multinom
summary(classifier)$standard.errors
prob_pred = predict(classifier, test, "probs")
stderrors = summary(classifier)$standard.errors
View(stderrors)
stderrors = t(summary(classifier)$standard.errors)
write.csv(stderrors, 'stderr.csv')
colnames(train)
head(train[,[1,2,5]])
head(train[,[1:2,5]])
head(train[,c(1,2,5)])
head(train[,c("X1Year","X1month","industry","current_ratio",'total_debt_equity_ratio',)])
head(train[,c("X1Year","X1month","industry","current_ratio",'total_debt_equity_ratio')])
columns = c("X1Year","X1month","industry","current_ratio",'total_debt_equity_ratio',
'day_sales_outstanding','gross_margin','operating_margin',
'interest_coverage_ratio','net_profit_margin','roe','changeToLiabilities',
'changeToNetincome','changeToOperatingActivities')
columns = c("X1Year","X1month","industry","current_ratio",'total_debt_equity_ratio',
'day_sales_outstanding','gross_margin','operating_margin',
'interest_coverage_ratio','net_profit_margin','roe','changeToLiabilities',
'changeToNetincome','changeToOperatingActivities','return_factor')
train = dataset %>%
filter(quarter < as.Date('2018-03-31'))
train = train[,columns]
test = dataset %>%
filter(quarter >= as.Date('2018-03-31')) %>%
filter(quarter < as.Date('2018-05-31'))
test = test[,columns]
valid = dataset %>%
filter(quarter >= as.Date('2018-05-31'))
valid = valid[,columns]
classifier = multinom(return_factor ~ ., data = train)
stderrors = t(summary(classifier)$standard.errors)
write.csv(stderrors, 'stderr.csv')
y_pred = ifelse(prob_pred > 0.5, 1, 0)
y_pred
table(y_pred,test$return_factor)
y_pred
length(y_pred)
length(test)
ncol(test)
nrow(test)
classifier = multinom(return_factor ~ ., data = train)
stderrors = t(summary(classifier)$standard.errors)
prob_pred = predict(classifier, test, "probs")
prob_pred
len(prob_pred)
length(prob_pred)
View(prob_pred)
y_pred = ifelse(prob_pred > 0.5, 1, 0)
dim(y_pred)
cm = table(test$return_factor, y_pred > 0.5)
factor(test$return_factor)
table(factor(test$return_factor),y_pred)
??table
confusionMatrix(
factor(sample(rep(letters[1:numLlvs], 200), 50)),
factor(sample(rep(letters[1:numLlvs], 200), 50)))
install.package('confusionMatrix')
install.packages('confusionMatrix')
library(kable)
install.package('kable')
install.packages('kable')
